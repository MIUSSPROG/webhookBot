import os
import telebot
from telebot import types
from flask import Flask, request
import firebase_admin
from firebase_admin import credentials
from firebase_admin import db
import uuid
from datetime import date
import json

TOKEN = '1967324593:AAHj6V46s11TddOdpPQEfZGZtpZB5tIY9G8'
APP_URL = f'https://school2120heroku.herokuapp.com/{TOKEN}'
bot = telebot.TeleBot(TOKEN)
server = Flask(__name__)

name = ''
building = ''
subject = ''
question = ''
# answer = ''
questionId = ''
userId = ''


cred = credentials.Certificate("key.json")

default_app = firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://telegrambot-7c961-default-rtdb.firebaseio.com/',
    'storageBucket': 'gs://telegrambot-7c961.appspot.com/'
})


@bot.message_handler(commands=['start'])
def start(message):
    global userId
    userId = str(message.from_user.id)
    print("userId: " + userId)
    print("------------------------")
    sti = open('logo2120.png', 'rb')
    # sti = bucket.blob('AnimatedSticker.tgs')
    bot.send_photo(message.chat.id, sti)
    bot.send_message(message.from_user.id,
                     "‚úã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –®–∫–æ–ª—É 2120!\nü§ñ –ú–µ–Ω—è –∑–æ–≤—É—Ç SchoolBot2120\nüßû‚Äç‚ôÇ –Ø —Å–º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å!\nüëá–í–æ—Ç —á—Ç–æ "
                     f"—è —É–º–µ—é!")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('üëî –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º')
    item2 = types.KeyboardButton('üéì –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ–± –æ–±—É—á–µ–Ω–∏–∏')
    # item3 = types.KeyboardButton('üìÑ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –®–∫–æ–ª—ã 2120')
    item4 = types.KeyboardButton('üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏')
    item5 = types.KeyboardButton('üôã‚Äç‚ôÄÔ∏èüôã‚Äç‚ôÇÔ∏è –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å')
    item6 = types.KeyboardButton('üìå –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏')
    item7 = types.KeyboardButton('‚ùì –ß–∞–í–û')
    item8 = types.KeyboardButton('üìí –ò—Å—Ç–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤')
    markup.add(item1, item2, item4, item5, item6, item7, item8)
    bot.send_message(message.chat.id,
                     '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{0.first_name}</b>! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª =>'.format(message.from_user),
                     reply_markup=markup, parse_mode='html')
    # bot.register_next_step_handler(message, reg_name)


@bot.message_handler(content_types=['text'])
def bot_message(message):
    # global userId
    userId = str(message.from_user.id)
    if message.chat.type == 'private':
        if message.text == 'üôã‚Äç‚ôÄÔ∏èüôã‚Äç‚ôÇÔ∏è –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å':
            bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å...")
            bot.register_next_step_handler(message, add_question)
        elif message.text == 'üìí –ò—Å—Ç–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤':
            all_questions_json = db.reference("telegrambot-7c961-default-rtdb/" + userId).get()
            question_list = str(all_questions_json).split('},')
            for el in question_list:
                parts = el.split("'")
                ansToQ = parts[5]
                if ansToQ == '':
                    ansToQ = "–û—Ç–≤–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç..."
                bot.send_message(message.chat.id, f'{parts[13]}\n<i>{parts[9]}</i>\n<b>{ansToQ}</b>', parse_mode='html')

        elif message.text == '‚ùì –ß–∞–í–û':
            bot.send_message(message.chat.id,
                             '<a href="https://sch2120tn.mskobr.ru/important-answers">–û—Ç–≤–µ—Ç—ã, –≤–∞–∂–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö</a>\n',
                             parse_mode='html')
        elif message.text == 'üéì –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ–± –æ–±—É—á–µ–Ω–∏–∏':
            bot.send_message(message.chat.id,
                             '<a href="https://docs.google.com/forms/d/1Zu0Q18MWmNVp9mYkkV-Bqn6jHAoNZhss2Mcrnn-fVKE'
                             '/viewform?edit_requested=true">–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ–± –æ–±—É—á–µ–Ω–∏–∏</a>\n',
                             parse_mode='html')
        elif message.text == 'üìå –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏':
            bot.send_message(message.chat.id,
                             '<a href="http://window.edu.ru/">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ "–ï–¥–∏–Ω–æ–µ –æ–∫–Ω–æ –¥–æ—Å—Ç—É–ø–∞ –∫ '
                             '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º"</a>\n',
                             parse_mode='html')
            bot.send_message(message.chat.id,
                             '<a href="http://fcior.edu.ru/">–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ-–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö '
                             '—Ä–µ—Å—É—Ä—Å–æ–≤</a>\n',
                             parse_mode='html')
            bot.send_message(message.chat.id,
                             '<a href="http://www.edu.ru/">–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç–∞–ª ¬´–†–æ—Å—Å–∏–π—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ¬ª</a>\n',
                             parse_mode='html')
            bot.send_message(message.chat.id, '<a href="https://edu.gov.ru/">–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –Ω–∞—É–∫–∏ –†–§</a>\n',
                             parse_mode='html')
            bot.send_message(message.chat.id,
                             '<a href="https://www.mos.ru/uslugi/">–†–∞–∑–¥–µ–ª "–£—Å–ª—É–≥–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã" –Ω–∞ mos.ru</a>\n',
                             parse_mode='html')
            bot.send_message(message.chat.id,
                             '<a href="http://school-collection.edu.ru/">–ï–¥–∏–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö '
                             '—Ä–µ—Å—É—Ä—Å–æ–≤</a>\n',
                             parse_mode='html')
            bot.send_message(message.chat.id,
                             '<a href="https://www.mos.ru/">–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≥. –ú–æ—Å–∫–≤—ã</a>\n',
                             parse_mode='html')
            bot.send_message(message.chat.id, '<a href="https://school.moscow/">–®–∫–æ–ª–∞ –ë–æ–ª—å—à–æ–≥–æ –ì–æ—Ä–æ–¥–∞</a>\n',
                             parse_mode='html')
            bot.send_message(message.chat.id, '<a href="https://www.mos.ru/donm/">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç–∞–ª</a>\n',
                             parse_mode='html')
            bot.send_message(message.chat.id, '<a href="https://mcko.ru/">–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ '
                                              '—É—á—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã '
                                              '¬´–ú–æ—Å–∫–æ–≤—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è¬ª</a>\n ', parse_mode='html')
            bot.send_message(message.chat.id,
                             '<a href="https://mcko.ru/pages/center_for_independent_diagnostic_null'
                             '">–¶–µ–Ω—Ç—Ä –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏</a>\n',
                             parse_mode='html')
            bot.send_message(message.chat.id,
                             '<a href="http://rcoi.mcko.ru/">–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã</a>\n',
                             parse_mode='html')
            bot.send_message(message.chat.id, '<a href="http://rcoi.mcko.ru/rcoi/contacts/">–ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è –ì–ò–ê</a>\n',
                             parse_mode='html')
            bot.send_message(message.chat.id,
                             '<a href="http://rcoi.mcko.ru/docs/">–ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ì–ò–ê-11, –ì–ò–ê-9</a>\n',
                             parse_mode='html')

            bot.send_message(message.chat.id, '<a href="http://rcoi.mcko.ru/gia-11-ege-gve/exam-schedule/">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ '
                                              '–ì–ò–ê-11</a>\n', parse_mode='html')
            bot.send_message(message.chat.id, '<a href="http://rcoi.mcko.ru/gia-11-ege-gve/final-composition'
                                              '-presentation/registration-and-conduct/">–ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—á–∏–Ω–µ–Ω–∏–µ ('
                                              '–∏–∑–ª–æ–∂–µ–Ω–∏–µ)</a>\n', parse_mode='html')
            bot.send_message(message.chat.id, '<a href="http://rcoi.mcko.ru/gia-11-ege-gve/">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è '
                                              '—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ì–ò–ê-11</a>\n', parse_mode='html')
            bot.send_message(message.chat.id, '<a href="http://rcoi.mcko.ru/gia-11-ege-gve/special-conditions'
                                              '/">–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ì–ò–ê-11</a>\n'
                             , parse_mode='html')
            bot.send_message(message.chat.id, '<a href="http://rcoi.mcko.ru/gia-11-ege-gve/exam-schedule/">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã '
                                              '–ì–ò–ê –∏ –ø–æ–¥–∞—á–∞ –∞–ø–µ–ª–ª—è—Ü–∏–π –ì–ò–ê-11</a>\n', parse_mode='html')
            bot.send_message(message.chat.id, '<a href="http://rcoi.mcko.ru/conflict-commission-gia-11/general'
                                              '-information/">–ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –ì–ò–ê-11</a>\n', parse_mode='html')
            bot.send_message(message.chat.id, '<a href="http://rcoi.mcko.ru/gia-9-oge-gve/examination-schedule'
                                              '/">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ì–ò–ê-9</a>\n', parse_mode='html')
            bot.send_message(message.chat.id, '<a href="http://rcoi.mcko.ru/gia-9-oge-gve/">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ '
                                              '–ì–ò–ê-9</a>\n', parse_mode='html')
            bot.send_message(message.chat.id, '<a href="http://rcoi.mcko.ru/gia-9-oge-gve/special-conditions'
                                              '/">–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –ì–ò–ê-9</a>\n',
                             parse_mode='html')
            bot.send_message(message.chat.id, '<a href="http://rcoi.mcko.ru/conflict-commission-gia-9/general'
                                              '-information/">–ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –ì–ò–ê-9</a>\n', parse_mode='html')
            bot.send_message(message.chat.id, '<a href="https://mcko.ru/pages/medalists">–ú–µ–¥–∞–ª—å "–ó–∞ –æ—Å–æ–±—ã–µ —É—Å–ø–µ—Ö–∏ –≤ '
                                              '–æ–±—É—á–µ–Ω–∏–∏"</a>\n', parse_mode='html')
            bot.send_message(message.chat.id, '<a href="https://mcrkpo.ru/%D0%BF%D0%BE%D0%BB%D0%B5%D0%B7%D0%BD%D1%8B'
                                              '%D0%B5%20%D1%80%D0%B5%D1%81%D1%83%D1%80%D1%81%D1%8B/">–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ '
                                              '—É—á–∏—Ç–µ–ª—è–º</a>\n', parse_mode='html')
            bot.send_message(message.chat.id,
                             '<a href="https://www.instagram.com/school2120/">Instagram –®–∫–æ–ª–∞ 2120</a>\n',
                             parse_mode='html')
            bot.send_message(message.chat.id,
                             '<a href="https://www.youtube.com/channel/UCuqRgk0XgHS0UR6oX3rb2Dg">Youtube –®–∫–æ–ª–∞ 2120</a>\n',
                             parse_mode='html')
            bot.send_message(message.chat.id, '<a href="https://vk.com/sch2120">Vkontakte –®–∫–æ–ª–∞ 2120</a>\n',
                             parse_mode='html')
            bot.send_message(message.chat.id,
                             '<a href="https://www.facebook.com/school2120/">Facebook –®–∫–æ–ª–∞ 2120</a>\n',
                             parse_mode='html')

        elif message.text == 'üëî –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º':
            bot.send_message(message.chat.id,
                             '<a href="https://forms.yandex.ru/u/60b09fc172d9ebd3f53d9af1/">–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ</a>',
                             parse_mode='html')
        elif message.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞')
            item2 = types.KeyboardButton('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞')
            item3 = types.KeyboardButton('–°–µ–∫—Ä–µ—Ç–∞—Ä—å —É—á–µ–±–Ω–æ–π —á–∞—Å—Ç–∏(—à–∫–æ–ª–∞)')
            item4 = types.KeyboardButton('–°–µ–∫—Ä–µ—Ç–∞—Ä—å —É—á–µ–±–Ω–æ–π —á–∞—Å—Ç–∏(–¥–µ—Ç—Å–∫–∏–π —Å–∞–¥)')
            item5 = types.KeyboardButton('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–∏—Ç–∞–Ω–∏—è')
            item6 = types.KeyboardButton('–û—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤')
            item7 = types.KeyboardButton('–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è')
            back = types.KeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥')
            markup.add(item1, item2, item3, item4, item5, item6, item7, back)
            bot.send_message(message.chat.id, 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏', reply_markup=markup)
        elif message.text == '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞':
            bot.send_message(message.chat.id, '–°–∏–Ω–µ–≤ –Æ—Ä–∏–π –ê–ª–µ–∫—Å–µ–µ–≤–∏—á\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <i>–ø–Ω-–ø—Ç 8:00-17:00</i>\n—Ç–µ–ª.: '
                                              '<b>+79857899649</b>', parse_mode='html')
        elif message.text == '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞':
            bot.send_message(message.chat.id, '–ü–æ–Ω–æ–º–∞—Ä–µ–≤–∞ –°–≤–µ—Ç–ª–∞–Ω–∞ –Æ—Ä—å–µ–≤–Ω–∞\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <i>–ø–Ω-–ø—Ç '
                                              '8:00-17:00</i>\n—Ç–µ–ª.: '
                                              '<b>+79269428766</b>\n'
                                              '<b>+74951233346</b>, '
                                              '–¥–æ–±. 2002', parse_mode='html')
        elif message.text == '–°–µ–∫—Ä–µ—Ç–∞—Ä—å —É—á–µ–±–Ω–æ–π —á–∞—Å—Ç–∏(—à–∫–æ–ª–∞)':
            bot.send_message(message.chat.id, '–°–æ–ª–æ–≤–µ–π—á–∏–∫ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ì–µ–Ω–Ω–∞–¥—å–µ–≤–Ω–∞\n–î–∞–ª–∏–µ–≤–∞ –°—É—Ä–∞—è –ê–¥–∞–º–æ–≤–Ω–∞\n–í—Ä–µ–º—è '
                                              '—Ä–∞–±–æ—Ç—ã: <i>–ü–Ω 9:00-12:00, –ß—Ç 16:00-19:00</i>\n—Ç–µ–ª.: '
                                              '<b>+79857642971</b>\n<b>+79852800465</b>\n<b>+74951233346 –¥–æ–±. 2007, '
                                              '2008</b>', parse_mode='html')
        elif message.text == '–°–µ–∫—Ä–µ—Ç–∞—Ä—å —É—á–µ–±–Ω–æ–π —á–∞—Å—Ç–∏(–¥–µ—Ç—Å–∫–∏–π —Å–∞–¥)':
            bot.send_message(message.chat.id, '–°–æ–ª–æ–≤–µ–π—á–∏–∫ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ì–µ–Ω–Ω–∞–¥—å–µ–≤–Ω–∞\n–î–∞–ª–∏–µ–≤–∞ –°—É—Ä–∞—è –ê–¥–∞–º–æ–≤–Ω–∞\n–í—Ä–µ–º—è '
                                              '—Ä–∞–±–æ—Ç—ã: <i>–ü–Ω 16:00-19:00, –°—Ä 16:00-20:00, –ü—Ç 8:00-12:00</i>\n—Ç–µ–ª.:'
                                              '<b>+79852800465</b>\n<b>+79857642971</b>', parse_mode='html')
        elif message.text == '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–∏—Ç–∞–Ω–∏—è':
            bot.send_message(message.chat.id, '–°–æ–ª–æ–≤—å–µ–≤–∞ –û–∫—Å–∞–Ω–∞ –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <i>–ü–Ω-–ü—Ç 8.00-17.00</i>\n'
                                              '—Ç–µ–ª.: <b>+79857642317</b>', parse_mode='html')
        elif message.text == '–û—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤':
            bot.send_message(message.chat.id, '–í–∞—Å–∏–ª—å–µ–≤–∞ –ï–ª–µ–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <i>–ü–Ω-–ü—Ç 8.00-17.00</i>\n'
                                              '—Ç–µ–ª.: <b>+74951233346, –¥–æ–±. 2015, 2016</b>', parse_mode='html')
        elif message.text == '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è':
            bot.send_message(message.chat.id, '–ú–∞–º—ã–∫–∏–Ω–∞ –¢–∞—Ç—å—è–Ω–∞ –í–∞–ª–µ–Ω—Ç–∏–Ω–æ–≤–Ω–∞\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <i>–ü–Ω-–ü—Ç 9.00-17.00 –û–±–µ–¥: '
                                              '13.00-14.00</i>\n '
                                              '—Ç–µ–ª.: <b>+74951233346, –¥–æ–±. 2015, 2016</b>', parse_mode='html')
        elif message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('üëî –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º')
            item2 = types.KeyboardButton('üéì –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ–± –æ–±—É—á–µ–Ω–∏–∏')
            # item3 = types.KeyboardButton('üìÑ –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –®–∫–æ–ª—ã 2120')
            item4 = types.KeyboardButton('üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏')
            item5 = types.KeyboardButton('üôã‚Äç‚ôÄÔ∏èüôã‚Äç‚ôÇÔ∏è –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å')
            item6 = types.KeyboardButton('üìå –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏')
            item7 = types.KeyboardButton('‚ùì –ß–∞–í–û')
            item8 = types.KeyboardButton('üìí –ò—Å—Ç–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤')
            markup.add(item1, item2, item4, item5, item6, item7, item8)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—É–Ω–∫—Ç =>', reply_markup=markup)
        elif message.text == 'nimdanimda2120!':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('üßæ –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤')
            item2 = types.KeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥')
            markup.add(item1, item2)
            bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!', reply_markup=markup)
        elif message.text == 'üßæ –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤':
            user_ids_json = str(db.reference("telegrambot-7c961-default-rtdb/").get()).replace("\'", "\"")
            ids = json.loads(user_ids_json)
            try:
                count_not_answered = 0
                for uid in ids:
                    all_questions_json = str(db.reference(f"telegrambot-7c961-default-rtdb/{uid}").get()).replace("\'", "\"")
                    question_ids_data = json.loads(all_questions_json)
                    for q_id in question_ids_data:
                        question_info_json = str(db.reference(f"telegrambot-7c961-default-rtdb/{uid}/{q_id}").get()).replace("\'", "\"")
                        question_info_data = json.loads(question_info_json)
                        cur_answer = str(question_info_data["answer"])
                        cur_question = str(question_info_data["question"])
                        cur_date = str(question_info_data["date"])
                        if cur_answer == "":
                            keyboard = types.InlineKeyboardMarkup()
                            key_yes = types.InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f'{str(uid)}&{str(q_id)}')
                            keyboard.add(key_yes)
                            bot.send_message(message.chat.id, f'<b>{cur_question}</b>\n<i>{cur_date}</i>', reply_markup=keyboard, parse_mode='html')
                            count_not_answered += 1
                if count_not_answered == 0:
                    bot.send_message(message.chat.id, "–ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ü•≥")
            except Exception as ex:
                print(ex)

        else:
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ä–∞–∑–¥–µ–ª')


def add_question(message):
    # global question
    question = str(message.text)
    # global userId
    uId = str(message.from_user.id)
    lines = ''
    with open('words.txt') as f:
        lines = f.readlines()
        words = []
    for word in lines:
        words.append(word.replace('\n', ''))

    is_bad_word = False
    for word in words:
        if word in question:
            is_bad_word = True
            break

    today = date.today()
    d = today.strftime("%d/%m/%Y")
    if not is_bad_word:
        new_question_id = uuid.uuid4().hex
        new_question = {
            "question": question,
            "answer": "",
            "date": d
        }
        db.reference("telegrambot-7c961-default-rtdb/" + uId + "/" + new_question_id).set(new_question)
        bot.send_message(message.from_user.id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á—É –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç "
                                               "—Å—Ä–∞–∑—É "
                                               "–í–∞—Å –æ–ø–æ–≤–µ—â—É!")
    else:
        bot.send_message(message.from_user.id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –Ω–µ —è—Å–µ–Ω")


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    global questionId
    global question
    global userId
    try:
        info = str(call.data).split("&")
        userId = info[0]
        questionId = info[1]
        # userId = str(call.message.from_user.id)
        # userId = '498046504'
        # questionId = str(call.data)
        # question = str(db.reference(f"telegrambot-7c961-default-rtdb/{userId}/{questionId}").get()).split("'")[11]
        # question = str(db.reference(f"telegrambot-7c961-default-rtdb/{userId}/{questionId}").get())
        # print("userId ######### " + userId)
        # print("questionId ########### " + questionId)
        # questionId = data.split('&')[0]
        # question = data.split('&')[1]
        question_to_answer_json = str(db.reference(f"telegrambot-7c961-default-rtdb/{userId}/{questionId}").get()).replace("\'", "\"")
        question = json.loads(question_to_answer_json)["question"]
        bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n<b>{question}</b> => ", parse_mode='html')
        bot.register_next_step_handler(call.message, get_answer)
    except Exception as ex:
        print(ex)


def get_answer(message):
    # global answer
    # global question
    # global questionId
    answer = message.text
    today = date.today()
    d = today.strftime("%d/%m/%Y")
    new_answer = {
        "question": question,
        "answer": answer,
        "date": d
    }
    db.reference(f"telegrambot-7c961-default-rtdb/{userId}/{questionId}").set(new_answer)
    bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")


@server.route('/' + TOKEN, methods=['POST'])
def get_message():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return '!', 200


@server.route('/')
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url=APP_URL)
    return '!', 200


if __name__ == '__main__':
    server.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))

